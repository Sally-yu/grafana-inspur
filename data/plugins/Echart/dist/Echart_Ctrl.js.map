{"version":3,"sources":["../src/Echart_Ctrl.js"],"names":["MetricsPanelCtrl","echarts","EchartREnder","_","kbn","TimeSeries","panelDefaults","backgroundColor","itemNormalColor","itemBorderColor","itemEmphasisColor","labelColor","labelEmphasisColor","dataColors","thresholds","thresholdTextColor","unit","decimal","ChartMode","TableMode","showLabel","values","areaStyle","barStack","barLabel","asRing","position","orient","axis","EchartCtrl","$scope","$injector","defaults","panel","setUnitFormat","value","events","on","onDataReceived","bind","onInitEditMode","dataList","data","render","addEditorTab","unitFormats","getUnitFormats","subItem","itemName","subDomainTitleFormat","empty","filled","format","formatValue","options","count","connector","date","legendTitleFormat","lower","min","upper","max","inner","down","up","split","map","strValue","Number","trim","size","pop","newColor","push","seriesData","console","log","JSON","stringify","series","datapoints","alias","target","flotpairs","getFlotPairs","nullPointMode","scope","elem","attrs","ctrl","templateUrl"],"mappings":"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","file":"Echart_Ctrl.js","sourcesContent":["import { MetricsPanelCtrl } from 'app/plugins/sdk';\nimport echarts from './lib/echarts.min';\nimport EchartREnder from './EchartRender';\nimport _ from 'lodash';\nimport kbn from 'app/core/utils/kbn';\nimport TimeSeries from 'app/core/time_series2';\n\n\nconst panelDefaults = {\n  backgroundColor: '#63696e',\n  itemNormalColor: '#2d3339',\n  itemBorderColor: '#404a59',\n  itemEmphasisColor: '#2a333d',\n  labelColor: '#f5f5f5',\n  labelEmphasisColor: '#f5896b',\n  dataColors: ['#83fa52', '#f6630e', '#f60e48'],\n  thresholds: '0,10',\n  thresholdTextColor: '#f5f5f5',\n  unit: 'ms',\n  decimal:2,\n  ChartMode:'line',\n  TableMode:'time',\n  showLabel:{\n    values:true\n  },\n  areaStyle:{\n    values:true\n  },\n  barStack:{\n    values:false\n  },\n  barLabel:{\n    values:false\n  },\n  asRing:{\n    values:false\n  },\n  position:'center',\n  orient:'horizontal',\n  axis:'y for value',\n  unit: 'short',\n\n};\n\n\nexport class EchartCtrl extends MetricsPanelCtrl {\n\n  constructor($scope, $injector) {\n\n    super($scope, $injector);\n    _.defaults(this.panel, panelDefaults);\n    this.setUnitFormat({value: this.panel.unit || 'short'});\n\n    this.events.on('data-received', this.onDataReceived.bind(this));\n    this.events.on('init-edit-mode', this.onInitEditMode.bind(this));\n\n    // this.mapValue = mapValueDefaults;\n\n  }\n\n  onDataReceived(dataList) {\n    if (!dataList) return;\n\n    const data = [];\n\n    //this.series = dataList.map(this.seriesHandler.bind(this));\n    // this.setValues(data);\n    this.data = dataList;\n    this.render(this.data);\n  }\n\n  onInitEditMode() {\n    this.addEditorTab('Options', 'public/plugins/grafana-Echart-Demo/editor.html', 2);  //使用plugins.json中的ID找html\n    this.unitFormats = kbn.getUnitFormats();\n\n  }\n\n  setUnitFormat(subItem) {\n    this.panel.unit = subItem.value;\n    this.panel.itemName = [subItem.value, subItem.value];\n    this.panel.subDomainTitleFormat = {\n      empty: '{date}',\n      filled: {format: options =>\n               this.formatValue(options.count, options) +\n               ' ' + options.connector + ' ' + options.date}\n    };\n    this.panel.legendTitleFormat = {\n      lower: {format: options => 'less than ' +\n              this.formatValue(options.min, options)},\n      upper: {format: options => 'more than ' +\n              this.formatValue(options.max, options)},\n      inner: {format: options => 'between ' +\n              this.formatValue(options.down, options) + ' and ' +\n              this.formatValue(options.up, options)}\n    };\n    this.render();\n  }\n\n  //html中直接绑定的事件\n  changeThresholds() {\n\n    //this.updateThresholdData();\n    this.render();\n  }\n\n  updateThresholdData() {\n\n    this.data.thresholds = this.panel.thresholds.split(',').map((strValue) => {\n      return Number(strValue.trim());\n    });\n    while (_.size(this.panel.dataColors) > _.size(this.data.thresholds) + 1) {\n      // too many colors. remove the last one.\n      this.panel.dataColors.pop();\n    }\n    while (_.size(this.panel.dataColors) < _.size(this.data.thresholds) + 1) {\n      // not enough colors. add one.\n      const newColor = 'rgba(50, 172, 45, 0.97)';\n      this.panel.dataColors.push(newColor);\n    }\n  }\n\n  setValues(data) {\n    // if (this.series && this.series.length > 0) {\n\n    //   let lastkv = [];//最后时刻value time\n    //   let allkv = [];//全部value time [[[v,t],[v,t],[v,t]...],[[v,t],[v,t],[v,t]...]]\n    //   this.series.forEach((serie) => {\n    //     const lastPoint = serie.datapoints[serie.datapoints.length - 1];  //最后时刻点[value,time]\n    //     const lastValue = _.isArray(lastPoint) ? lastPoint[0] : null; //最后时刻value\n    //     const lastTime = _.isArray(lastPoint) ? lastPoint[1] : null; //最后时刻time\n\n    //     lastkv.push({ value: lastValue, time: lastTime }); //每个serie装一对值和时间\n    //     const kvs = [];\n    //     serie.datapoints.forEach((point) => {\n    //       kvs.push([point[0], point[1]]);\n    //     });\n    //     allkv.push(kvs);\n    //   });\n    //   data.push(lastkv);\n    //   data.push(allkv);\n    // }\n    \n  }\n\n\n\n  seriesHandler(seriesData) {\n    console.log('seriesData:'+JSON.stringify(seriesData));\n    const series = new TimeSeries({\n      datapoints: seriesData.datapoints,\n      alias: seriesData.target,\n    });\n\n    series.flotpairs = series.getFlotPairs(this.panel.nullPointMode);\n    return series;\n  }\n\n\n\n  link(scope, elem, attrs, ctrl) {\n\n    EchartREnder(scope, elem, attrs, ctrl);\n  }\n}\nEchartCtrl.templateUrl = 'module.html';"]}