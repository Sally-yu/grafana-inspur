{"version":3,"sources":["../src/Echart_Ctrl.js"],"names":["MetricsPanelCtrl","echarts","EchartREnder","_","TimeSeries","panelDefaults","backgroundColor","itemNormalColor","itemBorderColor","itemEmphasisColor","labelColor","labelEmphasisColor","dataColors","thresholds","thresholdTextColor","unit","decimal","ChartMode","showLabel","values","areaStyle","position","orient","EchartCtrl","$scope","$injector","defaults","panel","events","on","onDataReceived","bind","onInitEditMode","dataList","data","render","addEditorTab","split","map","strValue","Number","trim","size","pop","newColor","push","seriesData","console","log","JSON","stringify","series","datapoints","alias","target","flotpairs","getFlotPairs","nullPointMode","scope","elem","attrs","ctrl","templateUrl"],"mappings":"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","file":"Echart_Ctrl.js","sourcesContent":["import { MetricsPanelCtrl } from 'app/plugins/sdk';\nimport echarts from './lib/echarts.min';\nimport EchartREnder from './EchartRender';\nimport _ from 'lodash';\nimport TimeSeries from 'app/core/time_series2';\n\n\nconst panelDefaults = {\n  backgroundColor: '#63696e',\n  itemNormalColor: '#2d3339',\n  itemBorderColor: '#404a59',\n  itemEmphasisColor: '#2a333d',\n  labelColor: '#f5f5f5',\n  labelEmphasisColor: '#f5896b',\n  dataColors: ['#83fa52', '#f6630e', '#f60e48'],\n  thresholds: '0,10',\n  thresholdTextColor: '#f5f5f5',\n  unit: 'ms',\n  decimal:2,\n  ChartMode:'line',\n  showLabel:{\n    values:true\n  },\n  areaStyle:{\n    values:true\n  },\n  position:'center',\n  orient:'horizontal',\n};\n\n\nexport class EchartCtrl extends MetricsPanelCtrl {\n\n  constructor($scope, $injector) {\n\n    super($scope, $injector);\n    _.defaults(this.panel, panelDefaults);\n\n    this.events.on('data-received', this.onDataReceived.bind(this));\n    this.events.on('init-edit-mode', this.onInitEditMode.bind(this));\n\n    // this.mapValue = mapValueDefaults;\n\n  }\n\n  onDataReceived(dataList) {\n    if (!dataList) return;\n\n    const data = [];\n\n    //this.series = dataList.map(this.seriesHandler.bind(this));\n    // this.setValues(data);\n    this.data = dataList;\n    this.render(this.data);\n  }\n\n  onInitEditMode() {\n    this.addEditorTab('Options', 'public/plugins/grafana-Echart-Demo/editor.html', 2);  //使用plugins.json中的ID找html\n\n  }\n\n\n  //html中直接绑定的事件\n  changeThresholds() {\n\n    //this.updateThresholdData();\n    this.render();\n  }\n\n  updateThresholdData() {\n\n    this.data.thresholds = this.panel.thresholds.split(',').map((strValue) => {\n      return Number(strValue.trim());\n    });\n    while (_.size(this.panel.dataColors) > _.size(this.data.thresholds) + 1) {\n      // too many colors. remove the last one.\n      this.panel.dataColors.pop();\n    }\n    while (_.size(this.panel.dataColors) < _.size(this.data.thresholds) + 1) {\n      // not enough colors. add one.\n      const newColor = 'rgba(50, 172, 45, 0.97)';\n      this.panel.dataColors.push(newColor);\n    }\n  }\n\n  setValues(data) {\n    // if (this.series && this.series.length > 0) {\n\n    //   let lastkv = [];//最后时刻value time\n    //   let allkv = [];//全部value time [[[v,t],[v,t],[v,t]...],[[v,t],[v,t],[v,t]...]]\n    //   this.series.forEach((serie) => {\n    //     const lastPoint = serie.datapoints[serie.datapoints.length - 1];  //最后时刻点[value,time]\n    //     const lastValue = _.isArray(lastPoint) ? lastPoint[0] : null; //最后时刻value\n    //     const lastTime = _.isArray(lastPoint) ? lastPoint[1] : null; //最后时刻time\n\n    //     lastkv.push({ value: lastValue, time: lastTime }); //每个serie装一对值和时间\n    //     const kvs = [];\n    //     serie.datapoints.forEach((point) => {\n    //       kvs.push([point[0], point[1]]);\n    //     });\n    //     allkv.push(kvs);\n    //   });\n    //   data.push(lastkv);\n    //   data.push(allkv);\n    // }\n    \n  }\n\n\n\n  seriesHandler(seriesData) {\n    console.log('seriesData:'+JSON.stringify(seriesData));\n    const series = new TimeSeries({\n      datapoints: seriesData.datapoints,\n      alias: seriesData.target,\n    });\n\n    series.flotpairs = series.getFlotPairs(this.panel.nullPointMode);\n    return series;\n  }\n\n\n\n  link(scope, elem, attrs, ctrl) {\n\n    EchartREnder(scope, elem, attrs, ctrl);\n  }\n}\nEchartCtrl.templateUrl = 'module.html';"]}